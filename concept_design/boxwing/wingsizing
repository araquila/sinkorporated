from math import *
from class1sizing import fuselage
from main_boxwing import class1box
from class1sizing import enginedimensions
from class2_boxwing import *

g =  9.80665
MTOW, OEW, WF = class1box()
TW = 0.25
length_fan_cowl, diameter_nacelle, length_generator, length_nacelle, diameter_highlight, diameter_exit_fan, diameter_gas_generator, diameter_inlet = enginedimensions(2, TW*MTOW)
#input parameters for wing area
WS = 3080
S = MTOW/WS
S = S * 1.36

s1frac = 0.5
s2frac = 1 - s1frac
length_nose, length_cabin, length_tail, length_fuselage, diameter_fuselage_outside = fuselage(60,4,4,1)
S1 = S * s1frac
S2 = S * s2frac
AR1 = 12
AR2 = 12
Fus_len = length_fuselage
frac_qtrchord_fus = 0.35

#empennage initial input


taper1 = 0.3
sweep1 = (2-taper1/0.2)*180/pi
b = sqrt(S1*AR1)
cr1 = 2*S1/(1+taper1)/b
ct1 = taper1 * cr1
print(b,cr1,ct1)

ct2 = ct1
cr2 = (2*S2-ct2*b)/b
taper2 = ct2/cr2
AR_v = 0.8
sweepv = 30
taperv = 0.7
ctv = cr2
crv = ctv/taperv
bv = AR_v*(ctv+crv)/2
Sv = bv**2 / AR_v
vtail_xoffset = -crv + sin(sweepv*pi/180)*bv + ctv
sweep2 = -atan((Fus_len + vtail_xoffset - Fus_len*frac_qtrchord_fus - b/2*tan(sweep1/180*pi) - 0.75*cr2 )/(b/2))*180/pi

print(sweep1, sweep2)
print(b, cr2, ct2)

kgtolbs = 2.20462262
mtoft = 3.2808399
MTOWlbs = MTOW/g*kgtolbs
n_lim = ult_load_factor(MTOWlbs)
n_ult = n_lim*1.5
S_control_ail = 0.05*S
S_control_elev = 0.03*S
wing_weight1_conv = det_wing_weight(MTOWlbs, n_ult, S1*mtoft**2, AR1, 0.13, taper1, sweep1/180*pi, S_control_ail*mtoft**2)
wing_weight2_conv = det_wing_weight(MTOWlbs, n_ult, S2*mtoft**2, AR2, 0.13, taper2, sweep2/180*pi, S_control_elev*mtoft**2)
print(wing_weight1_conv, wing_weight2_conv)


def cg_prandtl():
    fus_cg = 0.47*Fus_len
    wing1_cg = frac_qtrchord_fus*Fus_len + sin(sweep1*pi/180)*0.35*b/2 + (cr1-(cr1-ct1)*0.35)*0.35
    wing2_cg = Fus_len - crv + sin(sweep2*pi/180)*0.35*b/2 + (cr2-(cr2-ct2)*0.35)*0.35 + sin(sweepv*pi/180)*bv + 0.25*ctv
    tailv_cg = Fus_len - crv + sin(sweepv*pi/180)*0.55*bv/2 + (crv-(crv-ctv)*0.55)*0.42
    engine_cg = 0.75*Fus_len + 0.4*length_nacelle


print(bv)
